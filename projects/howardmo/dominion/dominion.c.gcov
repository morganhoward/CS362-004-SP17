        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:73
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    29604:    9:  if (*(int*)a > *(int*)b)
       16:   10:    return 1;
    29588:   11:  if (*(int*)a < *(int*)b)
    10576:   12:    return -1;
    19012:   13:  return 0;
    29604:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1056:   44:  SelectStream(1);
     1056:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     2112:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1056:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    23232:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   232320:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   200640:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   105600:   65:        }
    10560:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1056:   73:  if (numPlayers == 2)
        -:   74:    {
     1056:   75:      state->supplyCount[curse] = 10;
     1056:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1056:   87:  if (numPlayers == 2)
        -:   88:    {
     1056:   89:      state->supplyCount[estate] = 8;
     1056:   90:      state->supplyCount[duchy] = 8;
     1056:   91:      state->supplyCount[province] = 8;
     1056:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1056:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1056:  102:  state->supplyCount[silver] = 40;
     1056:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    44352:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   348480:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   163680:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    21120:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     1056:  115:		  if (numPlayers == 2){ 
     1056:  116:		    state->supplyCount[i] = 8; 
     1056:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
     1056:  119:		}
        -:  120:	      else
        -:  121:		{
     9504:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10560:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set chosen for the game
        -:  127:	    {
   153120:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   153120:  130:	}
        -:  131:
    21120:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply initialization complete
        -:  136:
        -:  137:  //set player decks
     6336:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     2112:  140:      state->deckCount[i] = 0;
    16896:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     6336:  143:	  state->deck[i][j] = estate;
     6336:  144:	  state->deckCount[i]++;
     6336:  145:	}
    33792:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    14784:  148:	  state->deck[i][j] = copper;
    14784:  149:	  state->deckCount[i]++;		
    14784:  150:	}
     2112:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6336:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     2112:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     2112:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6336:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2112:  166:      state->handCount[i] = 0;
     2112:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     2112:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    59136:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    28512:  178:      state->embargoTokens[i] = 0;
    28512:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1056:  182:  state->outpostPlayed = 0;
     1056:  183:  state->phase = 0;
     1056:  184:  state->numActions = 1;
     1056:  185:  state->numBuys = 1;
     1056:  186:  state->playedCardCount = 0;
     1056:  187:  state->whoseTurn = 0;
     1056:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12672:  192:  for (it = 0; it < 5; it++){
     5280:  193:    drawCard(state->whoseTurn, state);
     5280:  194:  }
        -:  195:
     1056:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1056:  198:  return 0;
     1056:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     2116:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     2116:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     2116:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    46520:  214:  while (state->deckCount[player] > 0) {
    21144:  215:    card = floor(Random() * state->deckCount[player]);
    21144:  216:    newDeck[newDeckPos] = state->deck[player][card];
    21144:  217:    newDeckPos++;
   152152:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    54932:  219:      state->deck[player][i] = state->deck[player][i+1];
    54932:  220:    }
    21144:  221:    state->deckCount[player]--;
        -:  222:  }
    46520:  223:  for (i = 0; i < newDeckPos; i++) {
    21144:  224:    state->deck[player][i] = newDeck[i];
    21144:  225:    state->deckCount[player]++;
    21144:  226:  }
        -:  227:
     2116:  228:  return 0;
     2116:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        8:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        8:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        8:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        8:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       16:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        8:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        8:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        8:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        8:  269:  return 0;
        8:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state)
        -:  273:{
        -:  274:    int who;
        -:  275:    if (DEBUG)
        -:  276:        printf("Entering buyCard...\n");
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
       80:  280:    who = state->whoseTurn;
        -:  281:
       80:  282:    if (state->numBuys < 1)
        -:  283:    {
        -:  284:        if (DEBUG)
        -:  285:            printf("You do not have any buys left\n");
        8:  286:        return -1;
        -:  287:    }
       72:  288:    else if (supplyCount(supplyPos, state) <1)
        -:  289:    {
        -:  290:        if (DEBUG)
        -:  291:            printf("There are not any of that type of card left\n");
       16:  292:        return -1;
        -:  293:    }
       56:  294:    else if (state->coins < getCost(supplyPos))
        -:  295:    {
        -:  296:        if (DEBUG)
        -:  297:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        8:  298:        return -1;
        -:  299:    }
        -:  300:    else
        -:  301:    {
       48:  302:        state->phase=1;
        -:  303:        //state->supplyCount[supplyPos]--;
       48:  304:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:        //printf("current coins: %d, cost: %d\n", state->coins, getCost(supplyPos));
       48:  306:        state->coins = (state->coins) - (getCost(supplyPos));
       48:  307:        state->numBuys--;
        -:  308:        if (DEBUG)
        -:  309:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:    }
        -:  311:
        -:  312:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:    //state->discardCount[who]++;
        -:  314:    
       48:  315:    return 0;
       80:  316:}
        -:  317:
        -:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
        -:  322:int handCard(int handPos, struct gameState *state) {
        8:  323:  int currentPlayer = whoseTurn(state);
        8:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
        -:  327:int supplyCount(int card, struct gameState *state) {
      120:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
        -:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
    #####:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
    #####:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
        -:  353:int whoseTurn(struct gameState *state) {
       81:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
        -:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
       20:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
      240:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  364:  {
      100:  365:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      100:  366:    state->hand[currentPlayer][i] = -1;//Set card to -1
      100:  367:  }
       20:  368:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  369:    
        -:  370:  //Code for determining the player
       20:  371:  if (currentPlayer < (state->numPlayers - 1)){ 
       16:  372:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       16:  373:  }
        -:  374:  else{
        4:  375:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  376:  }
        -:  377:
       20:  378:  state->outpostPlayed = 0;
       20:  379:  state->phase = 0;
       20:  380:  state->numActions = 1;
       20:  381:  state->coins = 0;
       20:  382:  state->numBuys = 1;
       20:  383:  state->playedCardCount = 0;
       20:  384:  state->handCount[state->whoseTurn] = 0;
        -:  385:
        -:  386:  //int k; move to top
        -:  387:  //Next player draws hand
      240:  388:  for (k = 0; k < 5; k++){
      100:  389:    drawCard(state->whoseTurn, state);//Draw a card
      100:  390:  }
        -:  391:
        -:  392:  //Update money
       20:  393:  updateCoins(state->whoseTurn, state , 0);
        -:  394:
       20:  395:  return 0;
        -:  396:}
        -:  397:
        -:  398:int isGameOver(struct gameState *state) {
        -:  399:  int i;
        -:  400:  int j;
        -:  401:	
        -:  402:  //if stack of Province cards is empty, the game ends
     1992:  403:  if (state->supplyCount[province] == 0)
        -:  404:    {
      296:  405:      return 1;
        -:  406:    }
        -:  407:
        -:  408:  //if three supply pile are at 0, the game ends
     1696:  409:  j = 0;
    88192:  410:  for (i = 0; i < 25; i++)
        -:  411:    {
    42400:  412:      if (state->supplyCount[i] == 0)
        -:  413:	{
     2016:  414:	  j++;
     2016:  415:	}
    42400:  416:    }
     1696:  417:  if ( j >= 3)
        -:  418:    {
      672:  419:      return 1;
        -:  420:    }
        -:  421:
     1024:  422:  return 0;
     1992:  423:}
        -:  424:
        -:  425:int scoreFor (int player, struct gameState *state) {
        -:  426:
        -:  427:  int i;
    #####:  428:  int score = 0;
        -:  429:  //score from hand
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  433:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  434:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  435:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  436:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  437:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  438:    }
        -:  439:
        -:  440:  //score from discard
    #####:  441:  for (i = 0; i < state->discardCount[player]; i++)
        -:  442:    {
    #####:  443:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  444:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  445:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  446:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  447:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  448:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  449:    }
        -:  450:
        -:  451:  //score from deck
    #####:  452:  for (i = 0; i < state->discardCount[player]; i++)
        -:  453:    {
    #####:  454:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  455:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  456:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  457:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  458:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  459:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  460:    }
        -:  461:
    #####:  462:  return score;
        -:  463:}
        -:  464:
        -:  465:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  466:  int i;	
        -:  467:  int j;
        -:  468:  int highScore;
        -:  469:  int currentPlayer;
        -:  470:
        -:  471:  //get score for each player
    #####:  472:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  473:    {
        -:  474:      //set unused player scores to -9999
    #####:  475:      if (i >= state->numPlayers)
        -:  476:	{
    #####:  477:	  players[i] = -9999;
    #####:  478:	}
        -:  479:      else
        -:  480:	{
    #####:  481:	  players[i] = scoreFor (i, state);
        -:  482:	}
    #####:  483:    }
        -:  484:
        -:  485:  //find highest score
    #####:  486:  j = 0;
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  488:    {
    #####:  489:      if (players[i] > players[j])
        -:  490:	{
    #####:  491:	  j = i;
    #####:  492:	}
    #####:  493:    }
    #####:  494:  highScore = players[j];
        -:  495:
        -:  496:  //add 1 to players who had less turns
    #####:  497:  currentPlayer = whoseTurn(state);
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:    {
    #####:  500:      if ( players[i] == highScore && i > currentPlayer )
        -:  501:	{
    #####:  502:	  players[i]++;
    #####:  503:	}
    #####:  504:    }
        -:  505:
        -:  506:  //find new highest score
    #####:  507:  j = 0;
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  509:    {
    #####:  510:      if ( players[i] > players[j] )
        -:  511:	{
    #####:  512:	  j = i;
    #####:  513:	}
    #####:  514:    }
    #####:  515:  highScore = players[j];
        -:  516:
        -:  517:  //set winners in array to 1 and rest to 0
    #####:  518:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  519:    {
    #####:  520:      if ( players[i] == highScore )
        -:  521:	{
    #####:  522:	  players[i] = 1;
    #####:  523:	}
        -:  524:      else
        -:  525:	{
    #####:  526:	  players[i] = 0;
        -:  527:	}
    #####:  528:    }
        -:  529:
    #####:  530:  return 0;
        -:  531:}
        -:  532:
        -:  533:int drawCard(int player, struct gameState *state)
        -:  534:{	int count;
        -:  535:  int deckCounter;
     5452:  536:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  537:    
        -:  538:    //Step 1 Shuffle the discard pile back into a deck
        -:  539:    int i;
        -:  540:    //Move discard to deck
       56:  541:    for (i = 0; i < state->discardCount[player];i++){
       24:  542:      state->deck[player][i] = state->discard[player][i];
       24:  543:      state->discard[player][i] = -1;
       24:  544:    }
        -:  545:
        4:  546:    state->deckCount[player] = state->discardCount[player];
        4:  547:    state->discardCount[player] = 0;//Reset discard
        -:  548:
        -:  549:    //Shuffle the deck
        4:  550:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  551:   
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  554:    }
        -:  555:    
        4:  556:    state->discardCount[player] = 0;
        -:  557:
        -:  558:    //Step 2 Draw Card
        4:  559:    count = state->handCount[player];//Get current player's hand count
        -:  560:    
        -:  561:    if (DEBUG){//Debug statements
        -:  562:      printf("Current hand count: %d\n", count);
        -:  563:    }
        -:  564:    
        4:  565:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  566:
        4:  567:    if (deckCounter == 0)
    #####:  568:      return -1;
        -:  569:
        4:  570:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  571:    state->deckCount[player]--;
        4:  572:    state->handCount[player]++;//Increment hand count
        4:  573:  }
        -:  574:
        -:  575:  else{
     5448:  576:    int count = state->handCount[player];//Get current hand count for player
        -:  577:    int deckCounter;
        -:  578:    if (DEBUG){//Debug statements
        -:  579:      printf("Current hand count: %d\n", count);
        -:  580:    }
        -:  581:
     5448:  582:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5448:  583:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5448:  584:    state->deckCount[player]--;
     5448:  585:    state->handCount[player]++;//Increment hand count
        -:  586:  }
        -:  587:
     5452:  588:  return 0;
     5452:  589:}
        -:  590:
        -:  591:int getCost(int cardNumber)
        -:  592:{
      580:  593:  switch( cardNumber ) 
        -:  594:    {
        -:  595:    case curse:
       17:  596:      return 0;
        -:  597:    case estate:
       65:  598:      return 2;
        -:  599:    case duchy:
       17:  600:      return 5;
        -:  601:    case province:
       33:  602:      return 8;
        -:  603:    case copper:
       33:  604:      return 0;
        -:  605:    case silver:
       33:  606:      return 3;
        -:  607:    case gold:
       25:  608:      return 6;
        -:  609:    case adventurer:
       17:  610:      return 6;
        -:  611:    case council_room:
       17:  612:      return 5;
        -:  613:    case feast:
       17:  614:      return 4;
        -:  615:    case gardens:
       17:  616:      return 4;
        -:  617:    case mine:
       17:  618:      return 5;
        -:  619:    case remodel:
       17:  620:      return 4;
        -:  621:    case smithy:
       17:  622:      return 4;
        -:  623:    case village:
       17:  624:      return 3;
        -:  625:    case baron:
       17:  626:      return 4;
        -:  627:    case great_hall:
       17:  628:      return 3;
        -:  629:    case minion:
       17:  630:      return 5;
        -:  631:    case steward:
       17:  632:      return 3;
        -:  633:    case tribute:
       17:  634:      return 5;
        -:  635:    case ambassador:
       17:  636:      return 3;
        -:  637:    case cutpurse:
       17:  638:      return 4;
        -:  639:    case embargo: 
       17:  640:      return 2;
        -:  641:    case outpost:
       17:  642:      return 5;
        -:  643:    case salvager:
       17:  644:      return 4;
        -:  645:    case sea_hag:
       17:  646:      return 4;
        -:  647:    case treasure_map:
       15:  648:      return 4;
        -:  649:    }
        -:  650:	
       19:  651:  return -1;
      580:  652:}
        -:  653:
        -:  654:// refactor of adventurer card effect
        -:  655:/*
        -:  656: * Effect: Reveal cards from your deck until you reveal 2 Treasure cards.
        -:  657: *         Put those Treasure cards into your hand and discard the other revealed cards.
        -:  658: */
        -:  659:int card_adventurer(struct gameState *state, int currentPlayer)
        -:  660:{
        -:  661:    // declare vars
        8:  662:    int drawn_treasure = 0;
        8:  663:    int cardDrawn = 0;
        -:  664:    int temphand[MAX_HAND];
        8:  665:    int temphand_count = 0;
        -:  666:
       48:  667:    while (drawn_treasure < 2)
        -:  668:    {
       16:  669:        if (state->deckCount[currentPlayer] < 1)
        -:  670:        {
        -:  671:            // if the deck is empty
    #####:  672:            shuffle(currentPlayer, state);
    #####:  673:        }
        -:  674:
       16:  675:        drawCard(currentPlayer, state);
        -:  676:        // top card of hand is the most recently drawn card.
       16:  677:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -:  678:
       16:  679:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  680:        {
       16:  681:            drawn_treasure++;
       16:  682:        }
        -:  683:
        -:  684:        else
        -:  685:        {
    #####:  686:            temphand[temphand_count] = cardDrawn;
    #####:  687:            state->handCount[currentPlayer]--;
    #####:  688:            temphand_count++;
        -:  689:        }
        -:  690:    }
        -:  691:
       16:  692:    while (temphand_count - 1 >= 0)
        -:  693:    {
        -:  694:        // discard all cards in play that have been drawn
    #####:  695:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphand_count - 1];
    #####:  696:        temphand_count--;
        -:  697:    }
        -:  698:
        -:  699:    // BUG: adventurer card is not discarded
        -:  700:
        8:  701:    return 0;
        -:  702:}
        -:  703:
        -:  704:// refactor of smithy card effect
        -:  705:/*
        -:  706: * Effect: +3 Cards
        -:  707: */
        -:  708:int card_smithy(struct gameState *state, int currentPlayer, int handPos)
        -:  709:{
        -:  710:    // vars
        8:  711:    int i = 0;
        -:  712:
        -:  713:    // BUG: smithy should only draw 3 cards, not 4 (e.g. 0, 1, 2, and 3 is 4)
        -:  714:    // for (int i = 0; i < 3; i++)
       80:  715:    for (i = 0; i < 4; i++)
        -:  716:    {
       32:  717:        drawCard(currentPlayer, state);
       32:  718:    }
        -:  719:
        -:  720:     // discard current card
        8:  721:    discardCard(handPos, currentPlayer, state, 0);
        -:  722:
        8:  723:    return 0;
        -:  724:}
        -:  725:
        -:  726:// refactor of great hall card effect
        -:  727:/*
        -:  728: * Effect: +1 card
        -:  729: *         +1 action
        -:  730: */
        -:  731:int card_great_hall(struct gameState *state, int currentPlayer, int handPos)
        -:  732:{
        -:  733:    // +1 card
        8:  734:    drawCard(currentPlayer, state);
        -:  735:
        -:  736:    // +1 action
        8:  737:    state->numActions++;
        -:  738:
        -:  739:    // discard current card
        8:  740:    discardCard(handPos, currentPlayer, state, 0);
        -:  741:
        8:  742:    return 0;
        -:  743:}
        -:  744:
        -:  745:// refactor of village card effect
        -:  746:/*
        -:  747: * Effect: +1 card
        -:  748: *         +2 actions
        -:  749: */
        -:  750:int card_village(struct gameState *state, int currentPlayer, int handPos)
        -:  751:{
        -:  752:    // +1 card
       16:  753:    drawCard(currentPlayer, state);
        -:  754:
        -:  755:    // +2 actions
        -:  756:    // BUG: Instead of adding two actions, village adds 3 actions
        -:  757:    //state->numActions = state->numActions + 2;
       16:  758:    state->numActions = state->numActions + 3;
        -:  759:
        -:  760:    // discard current card
       16:  761:    discardCard(handPos, currentPlayer, state, 0);
        -:  762:
       16:  763:    return 0;
        -:  764:}
        -:  765:
        -:  766:// refactor of tribute card effect
        -:  767:/*
        -:  768: * Effect: The player to your left reveals then discards the top 2 cards of his deck.
        -:  769: *         For each differently named card revealed, if it is an ...:
        -:  770: *             Action card: +2 actions
        -:  771: *             Treasure card: +2 coins
        -:  772: *             Victory card: +2 cards
        -:  773: */
        -:  774:int card_tribute(struct gameState *state, int currentPlayer, int nextPlayer)
        -:  775:{
        -:  776:    // vars
    #####:  777:    int tributeRevealedCards[2] = {-1, -1};
    #####:  778:    int i = 0;
        -:  779:
        -:  780:    // have player to the left draw 2 cards
    #####:  781:    for (i = 0; i < 2; i++)
        -:  782:    {
    #####:  783:        drawCard(nextPlayer, state);
        -:  784:        // top card of hand is the most recently drawn card.
    #####:  785:        tributeRevealedCards[i] = state->hand[nextPlayer][state->handCount[nextPlayer]-1];
    #####:  786:        discardCard(state->handCount[nextPlayer]-1, nextPlayer, state, 0);
    #####:  787:    }
        -:  788:
        -:  789:    // compare the two cards to determine if they are different
    #####:  790:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -:  791:    {
        -:  792:        // drop the second card because it's a duplicate
    #####:  793:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  794:        state->playedCardCount++;
    #####:  795:        tributeRevealedCards[1] = -1;
    #####:  796:    }
        -:  797:
        -:  798:    // award card benefits based on number of different cards
        -:  799:    // BUG: cards with multiple types aren't awarded benefits for each type (e.g. Great Hall, action-victory)
    #####:  800:    for (i = 0; i <= 2; i++)
        -:  801:    {
        -:  802:        // treasure card
    #####:  803:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -:  804:        {
    #####:  805:            state->coins += 2;
    #####:  806:        }
        -:  807:        // victory card
    #####:  808:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -:  809:        {
    #####:  810:            drawCard(currentPlayer, state);
    #####:  811:            drawCard(currentPlayer, state);
    #####:  812:        }
        -:  813:        // action card
        -:  814:        else
        -:  815:        {
    #####:  816:            state->numActions = state->numActions + 2;
        -:  817:        }
    #####:  818:    }
        -:  819:    // BUG: card isn't discarded
    #####:  820:    return 0;
        -:  821:}
        -:  822:
        -:  823:
        -:  824:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  825:{
        -:  826:    int i;
        -:  827:    int j;
        -:  828:    int k;
        -:  829:    int x;
        -:  830:    int index;
        -:  831:    int temphand[MAX_HAND];// moved above the if statement
       40:  832:    int currentPlayer = whoseTurn(state);
       40:  833:    int nextPlayer = currentPlayer + 1;
       40:  834:    if (nextPlayer > (state->numPlayers - 1))
        -:  835:    {
    #####:  836:        nextPlayer = 0;
    #####:  837:    }
        -:  838:  
        -:  839:	
        -:  840:    //uses switch to select card and perform actions
       40:  841:    switch( card )
        -:  842:    {
        -:  843:        case adventurer:
        8:  844:            return card_adventurer(state, currentPlayer);
        -:  845:
        -:  846:        case council_room:
        -:  847:            //+4 Cards
    #####:  848:            for (i = 0; i < 4; i++)
        -:  849:            {
    #####:  850:                drawCard(currentPlayer, state);
    #####:  851:            }
        -:  852:
        -:  853:            //+1 Buy
    #####:  854:            state->numBuys++;
        -:  855:
        -:  856:            //Each other player draws a card
    #####:  857:            for (i = 0; i < state->numPlayers; i++)
        -:  858:            {
    #####:  859:                if (i != currentPlayer)
        -:  860:                {
    #####:  861:                    drawCard(i, state);
    #####:  862:                }
    #####:  863:            }
        -:  864:
        -:  865:            //put played card in played card pile
    #####:  866:            discardCard(handPos, currentPlayer, state, 0);
        -:  867:
    #####:  868:            return 0;
        -:  869:
        -:  870:        case feast:
        -:  871:            //gain card with cost up to 5
        -:  872:            //Backup hand
    #####:  873:            for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  874:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  875:                state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  876:            }
        -:  877:            //Backup hand
        -:  878:
        -:  879:            //Update Coins for Buy
    #####:  880:            updateCoins(currentPlayer, state, 5);
    #####:  881:            x = 1;//Condition to loop on
    #####:  882:            while (x == 1) {//Buy one card
    #####:  883:                if (supplyCount(choice1, state) <= 0) {
        -:  884:                    if (DEBUG)
        -:  885:                        printf("None of that card left, sorry!\n");
        -:  886:
        -:  887:                    if (DEBUG) {
        -:  888:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  889:                    }
    #####:  890:                } else if (state->coins < getCost(choice1)) {
    #####:  891:                    printf("That card is too expensive!\n");
        -:  892:
        -:  893:                    if (DEBUG) {
        -:  894:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  895:                    }
    #####:  896:                } else {
        -:  897:
        -:  898:                    if (DEBUG) {
        -:  899:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  900:                                                   state->discardCount[currentPlayer]);
        -:  901:                    }
        -:  902:
    #####:  903:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  904:                    x = 0;//No more buying cards
        -:  905:
        -:  906:                    if (DEBUG) {
        -:  907:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  908:                                                   state->discardCount[currentPlayer]);
        -:  909:                    }
        -:  910:
        -:  911:                }
        -:  912:            }
        -:  913:
        -:  914:            //Reset Hand
    #####:  915:            for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  916:                state->hand[currentPlayer][i] = temphand[i];
    #####:  917:                temphand[i] = -1;
    #####:  918:            }
        -:  919:            //Reset Hand
        -:  920:
    #####:  921:            return 0;
        -:  922:
        -:  923:        case gardens:
    #####:  924:            return -1;
        -:  925:
        -:  926:        case mine:
    #####:  927:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  928:
    #####:  929:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####:  930:                return -1;
        -:  931:            }
        -:  932:
    #####:  933:            if (choice2 > treasure_map || choice2 < curse) {
    #####:  934:                return -1;
        -:  935:            }
        -:  936:
    #####:  937:            if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
    #####:  938:                return -1;
        -:  939:            }
        -:  940:
    #####:  941:            gainCard(choice2, state, 2, currentPlayer);
        -:  942:
        -:  943:            //discard card from hand
    #####:  944:            discardCard(handPos, currentPlayer, state, 0);
        -:  945:
        -:  946:            //discard trashed card
    #####:  947:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  948:                if (state->hand[currentPlayer][i] == j) {
    #####:  949:                    discardCard(i, currentPlayer, state, 0);
    #####:  950:                    break;
        -:  951:                }
    #####:  952:            }
        -:  953:
    #####:  954:            return 0;
        -:  955:
        -:  956:        case remodel:
    #####:  957:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  958:
    #####:  959:            if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2)) {
    #####:  960:                return -1;
        -:  961:            }
        -:  962:
    #####:  963:            gainCard(choice2, state, 0, currentPlayer);
        -:  964:
        -:  965:            //discard card from hand
    #####:  966:            discardCard(handPos, currentPlayer, state, 0);
        -:  967:
        -:  968:            //discard trashed card
    #####:  969:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  970:                if (state->hand[currentPlayer][i] == j) {
    #####:  971:                    discardCard(i, currentPlayer, state, 0);
    #####:  972:                    break;
        -:  973:                }
    #####:  974:            }
        -:  975:
        -:  976:
    #####:  977:            return 0;
        -:  978:
        -:  979:        case smithy:
        8:  980:            return card_smithy(state, currentPlayer, handPos);
        -:  981:
        -:  982:        case village:
       16:  983:            return card_village(state, currentPlayer, handPos);
        -:  984:
        -:  985:        case baron:
    #####:  986:            state->numBuys++;//Increase buys by 1!
    #####:  987:            if (choice1 > 0) {//Boolean true or going to discard an estate
    #####:  988:                int p = 0;//Iterator for hand!
    #####:  989:                int card_not_discarded = 1;//Flag for discard set!
    #####:  990:                while (card_not_discarded) {
    #####:  991:                    if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####:  992:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  993:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  994:                        state->discardCount[currentPlayer]++;
    #####:  995:                        for (; p < state->handCount[currentPlayer]; p++) {
    #####:  996:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
    #####:  997:                        }
    #####:  998:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  999:                        state->handCount[currentPlayer]--;
    #####: 1000:                        card_not_discarded = 0;//Exit the loop
    #####: 1001:                    } else if (p > state->handCount[currentPlayer]) {
        -: 1002:                        if (DEBUG) {
        -: 1003:                            printf("No estate cards in your hand, invalid choice\n");
        -: 1004:                            printf("Must gain an estate if there are any\n");
        -: 1005:                        }
    #####: 1006:                        if (supplyCount(estate, state) > 0) {
    #####: 1007:                            gainCard(estate, state, 0, currentPlayer);
    #####: 1008:                            state->supplyCount[estate]--;//Decrement estates
    #####: 1009:                            if (supplyCount(estate, state) == 0) {
    #####: 1010:                                isGameOver(state);
    #####: 1011:                            }
    #####: 1012:                        }
    #####: 1013:                        card_not_discarded = 0;//Exit the loop
    #####: 1014:                    } else {
    #####: 1015:                        p++;//Next card
        -: 1016:                    }
        -: 1017:                }
    #####: 1018:            } else {
    #####: 1019:                if (supplyCount(estate, state) > 0) {
    #####: 1020:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1021:                    state->supplyCount[estate]--;//Decrement Estates
    #####: 1022:                    if (supplyCount(estate, state) == 0) {
    #####: 1023:                        isGameOver(state);
    #####: 1024:                    }
    #####: 1025:                }
        -: 1026:            }
        -: 1027:
        -: 1028:
    #####: 1029:            return 0;
        -: 1030:
        -: 1031:        case great_hall:
        8: 1032:            return card_great_hall(state, currentPlayer, handPos);
        -: 1033:
        -: 1034:        case minion:
        -: 1035:            //+1 action
    #####: 1036:            state->numActions++;
        -: 1037:
        -: 1038:            //discard card from hand
    #####: 1039:            discardCard(handPos, currentPlayer, state, 0);
        -: 1040:
    #####: 1041:            if (choice1)        //+2 coins
        -: 1042:            {
    #####: 1043:                state->coins = state->coins + 2;
    #####: 1044:            }
    #####: 1045:            else if (choice2)        //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1046:            {
        -: 1047:                //discard hand
    #####: 1048:                while (numHandCards(state) > 0)
        -: 1049:                {
    #####: 1050:                    discardCard(handPos, currentPlayer, state, 0);
        -: 1051:                }
        -: 1052:
        -: 1053:                //draw 4
    #####: 1054:                for (i = 0; i < 4; i++)
        -: 1055:                {
    #####: 1056:                    drawCard(currentPlayer, state);
    #####: 1057:                }
        -: 1058:
        -: 1059:                //other players discard hand and redraw if hand size > 4
    #####: 1060:                for (i = 0; i < state->numPlayers; i++)
        -: 1061:                {
    #####: 1062:                    if (i != currentPlayer)
        -: 1063:                    {
    #####: 1064:                        if (state->handCount[i] > 4)
        -: 1065:                        {
        -: 1066:                            //discard hand
    #####: 1067:                            while (state->handCount[i] > 0)
        -: 1068:                            {
    #####: 1069:                                discardCard(handPos, i, state, 0);
        -: 1070:                            }
        -: 1071:
        -: 1072:                            //draw 4
    #####: 1073:                            for (j = 0; j < 4; j++)
        -: 1074:                            {
    #####: 1075:                                drawCard(i, state);
    #####: 1076:                            }
    #####: 1077:                        }
    #####: 1078:                    }
    #####: 1079:                }
        -: 1080:
    #####: 1081:            }
    #####: 1082:            return 0;
        -: 1083:
        -: 1084:        case steward:
    #####: 1085:            if (choice1 == 1)
        -: 1086:            {
        -: 1087:                //+2 cards
    #####: 1088:                drawCard(currentPlayer, state);
    #####: 1089:                drawCard(currentPlayer, state);
    #####: 1090:            }
    #####: 1091:            else if (choice1 == 2)
        -: 1092:            {
        -: 1093:                //+2 coins
    #####: 1094:                state->coins = state->coins + 2;
    #####: 1095:            }
        -: 1096:            else
        -: 1097:            {
        -: 1098:                //trash 2 cards in hand
    #####: 1099:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1100:                discardCard(choice3, currentPlayer, state, 1);
        -: 1101:            }
        -: 1102:
        -: 1103:            //discard card from hand
    #####: 1104:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1105:            return 0;
        -: 1106:
        -: 1107:        case tribute:
    #####: 1108:            return card_tribute(state, currentPlayer, nextPlayer);
        -: 1109:
        -: 1110:        case ambassador:
    #####: 1111:            j = 0;        //used to check if player has enough cards to discard
        -: 1112:
    #####: 1113:            if (choice2 > 2 || choice2 < 0) {
    #####: 1114:                return -1;
        -: 1115:            }
        -: 1116:
    #####: 1117:            if (choice1 == handPos) {
    #####: 1118:                return -1;
        -: 1119:            }
        -: 1120:
    #####: 1121:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1122:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
    #####: 1123:                    j++;
    #####: 1124:                }
    #####: 1125:            }
    #####: 1126:            if (j < choice2) {
    #####: 1127:                return -1;
        -: 1128:            }
        -: 1129:
        -: 1130:            if (DEBUG)
        -: 1131:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:            //increase supply count for choosen card by amount being discarded
    #####: 1134:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:
        -: 1136:            //each other player gains a copy of revealed card
    #####: 1137:            for (i = 0; i < state->numPlayers; i++) {
    #####: 1138:                if (i != currentPlayer) {
    #####: 1139:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1140:                }
    #####: 1141:            }
        -: 1142:
        -: 1143:            //discard played card from hand
    #####: 1144:            discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
        -: 1146:            //trash copies of cards returned to supply
    #####: 1147:            for (j = 0; j < choice2; j++) {
    #####: 1148:                for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1149:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
    #####: 1150:                        discardCard(i, currentPlayer, state, 1);
    #####: 1151:                        break;
        -: 1152:                    }
    #####: 1153:                }
    #####: 1154:            }
        -: 1155:
    #####: 1156:            return 0;
        -: 1157:
        -: 1158:        case cutpurse:
        -: 1159:
    #####: 1160:            updateCoins(currentPlayer, state, 2);
    #####: 1161:            for (i = 0; i < state->numPlayers; i++) {
    #####: 1162:                if (i != currentPlayer) {
    #####: 1163:                    for (j = 0; j < state->handCount[i]; j++) {
    #####: 1164:                        if (state->hand[i][j] == copper) {
    #####: 1165:                            discardCard(j, i, state, 0);
    #####: 1166:                            break;
        -: 1167:                        }
    #####: 1168:                        if (j == state->handCount[i]) {
    #####: 1169:                            for (k = 0; k < state->handCount[i]; k++) {
        -: 1170:                                if (DEBUG)
        -: 1171:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1172:                            }
    #####: 1173:                            break;
        -: 1174:                        }
    #####: 1175:                    }
        -: 1176:
    #####: 1177:                }
        -: 1178:
    #####: 1179:            }
        -: 1180:
        -: 1181:            //discard played card from hand
    #####: 1182:            discardCard(handPos, currentPlayer, state, 0);
        -: 1183:
    #####: 1184:            return 0;
        -: 1185:
        -: 1186:
        -: 1187:        case embargo:
        -: 1188:            //+2 Coins
    #####: 1189:            state->coins = state->coins + 2;
        -: 1190:
        -: 1191:            //see if selected pile is in play
    #####: 1192:            if (state->supplyCount[choice1] == -1) {
    #####: 1193:                return -1;
        -: 1194:            }
        -: 1195:
        -: 1196:            //add embargo token to selected supply pile
    #####: 1197:            state->embargoTokens[choice1]++;
        -: 1198:
        -: 1199:            //trash card
    #####: 1200:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1201:            return 0;
        -: 1202:
        -: 1203:        case outpost:
        -: 1204:            //set outpost flag
    #####: 1205:            state->outpostPlayed++;
        -: 1206:
        -: 1207:            //discard card
    #####: 1208:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:            return 0;
        -: 1210:
        -: 1211:        case salvager:
        -: 1212:            //+1 buy
    #####: 1213:            state->numBuys++;
        -: 1214:
    #####: 1215:            if (choice1) {
        -: 1216:                //gain coins equal to trashed card
    #####: 1217:                state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1218:                //trash card
    #####: 1219:                discardCard(choice1, currentPlayer, state, 1);
    #####: 1220:            }
        -: 1221:
        -: 1222:            //discard card
    #####: 1223:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1224:            return 0;
        -: 1225:
        -: 1226:        case sea_hag:
    #####: 1227:            for (i = 0; i < state->numPlayers; i++) {
    #####: 1228:                if (i != currentPlayer) {
    #####: 1229:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1230:                    state->deckCount[i]--;
    #####: 1231:                    state->discardCount[i]++;
    #####: 1232:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1233:                }
    #####: 1234:            }
    #####: 1235:            return 0;
        -: 1236:
        -: 1237:        case treasure_map:
        -: 1238:            //search hand for another treasure_map
    #####: 1239:            index = -1;
    #####: 1240:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1241:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
    #####: 1242:                    index = i;
    #####: 1243:                    break;
        -: 1244:                }
    #####: 1245:            }
    #####: 1246:            if (index > -1) {
        -: 1247:                //trash both treasure cards
    #####: 1248:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1249:                discardCard(index, currentPlayer, state, 1);
        -: 1250:
        -: 1251:                //gain 4 Gold cards
    #####: 1252:                for (i = 0; i < 4; i++) {
    #####: 1253:                    gainCard(gold, state, 1, currentPlayer);
    #####: 1254:                }
        -: 1255:
        -: 1256:                //return success
    #####: 1257:                return 1;
        -: 1258:            }
        -: 1259:
        -: 1260:            //no second treasure_map found in hand
    #####: 1261:            return -1;
        -: 1262:    }
        -: 1263:
    #####: 1264:    return -1;
       40: 1265:}
        -: 1266:
        -: 1267:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1268:{
        -: 1269:	
        -: 1270:  //if card is not trashed, added to Played pile 
       32: 1271:  if (trashFlag < 1)
        -: 1272:    {
        -: 1273:      //add card to played pile
       32: 1274:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       32: 1275:      state->playedCardCount++;
       32: 1276:    }
        -: 1277:	
        -: 1278:  //set played card to -1
       32: 1279:  state->hand[currentPlayer][handPos] = -1;
        -: 1280:	
        -: 1281:  //remove card from player's hand
       32: 1282:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1283:    {
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
    #####: 1286:    }
       32: 1287:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1288:    {
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
    #####: 1291:    }
        -: 1292:  else 	
        -: 1293:    {
        -: 1294:      //replace discarded card with last card in hand
       32: 1295:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1296:      //set last card to -1
       32: 1297:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1298:      //reduce number of cards in hand
       32: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
        -: 1301:	
       32: 1302:  return 0;
        -: 1303:}
        -: 1304:
        -: 1305:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1306:{
        -: 1307:  //Note: supplyPos is enum of chosen card
        -: 1308:	
        -: 1309:  //check if supply pile is empty (0) or card is not used in game (-1)
       48: 1310:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1311:    {
    #####: 1312:      return -1;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //added card for [whoseTurn] current player:
        -: 1316:  // toFlag = 0 : add to discard
        -: 1317:  // toFlag = 1 : add to deck
        -: 1318:  // toFlag = 2 : add to hand
        -: 1319:
       48: 1320:  if (toFlag == 1)
        -: 1321:    {
    #####: 1322:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1323:      state->deckCount[player]++;
    #####: 1324:    }
       48: 1325:  else if (toFlag == 2)
        -: 1326:    {
    #####: 1327:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1328:      state->handCount[player]++;
    #####: 1329:    }
        -: 1330:  else
        -: 1331:    {
       48: 1332:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       48: 1333:      state->discardCount[player]++;
        -: 1334:    }
        -: 1335:	
        -: 1336:  //decrease number in supply pile
       48: 1337:  state->supplyCount[supplyPos]--;
        -: 1338:	 
       48: 1339:  return 0;
       48: 1340:}
        -: 1341:
        -: 1342:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1343:{
        -: 1344:  int i;
        -: 1345:	
        -: 1346:  //reset coin count
     1108: 1347:  state->coins = 0;
        -: 1348:
        -: 1349:  //add coins for each Treasure card in player's hand
    13296: 1350:  for (i = 0; i < state->handCount[player]; i++)
        -: 1351:  {
     5540: 1352:      if (state->hand[player][i] == copper)
        -: 1353:      {
     4376: 1354:          state->coins += 1;
     4376: 1355:      }
     1164: 1356:      else if (state->hand[player][i] == silver)
        -: 1357:      {
       12: 1358:          state->coins += 2;
       12: 1359:      }
     1152: 1360:      else if (state->hand[player][i] == gold)
        -: 1361:      {
       16: 1362:          state->coins += 3;
       16: 1363:      }
     5540: 1364:  }
        -: 1365:
        -: 1366:  //add bonus
     1108: 1367:  state->coins += bonus;
        -: 1368:
     1108: 1369:  return 0;
        -: 1370:}
        -: 1371:
        -: 1372:
        -: 1373://end of dominion.c
        -: 1374:
