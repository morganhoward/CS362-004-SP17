Unit test results


-------- unittest1 --------
Test A PASS
Test B PASS
Function 'isGameOver'
Lines executed:100.00% of 12

-------- unittest2 --------
Test A PASS
Test B PASS
Function 'getCost'
Lines executed:100.00% of 30

-------- unittest3 --------
FAIL 7 6
Test A FAIL 1 0
FAIL 0 5
Test B FAIL 1 0
Test C PASS
Test D PASS
Function 'endTurn'
Lines executed:100.00% of 22

-------- unittest4 --------
Test A PASS
Test B PASS
FAIL 3 1
Test C FAIL 1 0
Test D PASS
Test E PASS
Test F PASS
Test G PASS
Function 'buyCard'
Lines executed:100.00% of 13


Card test results

-------- cardtest1 --------
FAIL 2 1
FAIL 7 8
Test A FAIL 2 0
Test B PASS
Test C PASS
Function 'card_smithy'
Lines executed:100.00% of 6

-------- cardtest2 --------
Test A PASS
FAIL 6 5
Test B FAIL 1 0
Test C PASS
Test D PASS
Test E PASS
Function 'card_adventurer'
Lines executed:63.16% of 19
        -:  659:int card_adventurer(struct gameState *state, int currentPlayer)
        -:  660:{
        -:  661:    // declare vars
        8:  662:    int drawn_treasure = 0;
        8:  663:    int cardDrawn = 0;
        -:  664:    int temphand[MAX_HAND];
        8:  665:    int temphand_count = 0;
        -:  666:
       48:  667:    while (drawn_treasure < 2)
        -:  668:    {
       16:  669:        if (state->deckCount[currentPlayer] < 1)
        -:  670:        {
        -:  671:            // if the deck is empty
    #####:  672:            shuffle(currentPlayer, state);
    #####:  673:        }
        -:  674:
       16:  675:        drawCard(currentPlayer, state);
        -:  676:        // top card of hand is the most recently drawn card.
       16:  677:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -:  678:
       16:  679:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  680:        {
       16:  681:            drawn_treasure++;
       16:  682:        }
        -:  683:
        -:  684:        else
        -:  685:        {
    #####:  686:            temphand[temphand_count] = cardDrawn;
    #####:  687:            state->handCount[currentPlayer]--;
    #####:  688:            temphand_count++;
        -:  689:        }
        -:  690:    }
        -:  691:
       16:  692:    while (temphand_count - 1 >= 0)
        -:  693:    {
        -:  694:        // discard all cards in play that have been drawn
    #####:  695:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[temphand_count - 1];
    #####:  696:        temphand_count--;
        -:  697:    }
        -:  698:
        -:  699:    // BUG: adventurer card is not discarded
        -:  700:
        8:  701:    return 0;

-------- cardtest3 --------
Test A PASS
FAIL 3 4
Test B FAIL 1 0
Test C PASS
Test D PASS
Function 'card_village'
Lines executed:100.00% of 4

-------- cardtest4 --------
Test A PASS
Test B PASS
Test C PASS
Test D PASS
Function 'card_great_hall'
Lines executed:100.00% of 4
